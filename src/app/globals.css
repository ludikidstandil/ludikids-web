/* src/app/globals.css */
@tailwind base;
@tailwind components;
@tailwind utilities;

body {
  @apply font-cuerpo; /* Aplica la fuente 'cuerpo' globalmente (definida en tailwind.config.js) */
  /* Puedes añadir otros estilos base para el body si es necesario,
     como un color de fondo por defecto si no lo pones en layout.js */
  /* ejemplo: @apply bg-gray-50 text-zinc-800; */
}

/* --------------------------------------------------- */
/* Animaciones para el Botón de WhatsApp Flotante       */
/* --------------------------------------------------- */
.animate-pulse-whatsapp {
  animation: pulse-whatsapp 2s infinite;
}

@keyframes pulse-whatsapp {
  0% {
    transform: scale(0.95);
    box-shadow: 0 0 0 0 rgba(37, 211, 102, 0.7); /* Color de WhatsApp con opacidad */
  }
  70% {
    transform: scale(1);
    box-shadow: 0 0 0 10px rgba(37, 211, 102, 0); /* La sombra se expande y desaparece */
  }
  100% {
    transform: scale(0.95);
    box-shadow: 0 0 0 0 rgba(37, 211, 102, 0);
  }
}

/* Animación para la onda expansiva del span del botón de WhatsApp */
.animate-ping-whatsapp {
  animation: ping-whatsapp 1.5s cubic-bezier(0, 0, 0.2, 1) infinite;
}

@keyframes ping-whatsapp {
  75%, 100% {
    transform: scale(2);
    opacity: 0;
  }
}

/* --------------------------------------------------- */
/* Animaciones de Fade-in para la Página de Inicio     */
/* --------------------------------------------------- */
@keyframes fadeInDown {
  from {
    opacity: 0;
    transform: translateY(-20px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

@keyframes fadeInUp {
  from {
    opacity: 0;
    transform: translateY(20px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

/* Clases de utilidad para aplicar las animaciones */
.animate-fade-in-down {
  animation: fadeInDown 0.6s ease-out forwards;
}

.animate-fade-in-up {
  animation: fadeInUp 0.6s ease-out forwards;
}

/* Clases de Delay para escalonar las animaciones */
/* Tailwind no las tiene por defecto para la propiedad animation-delay */
.delay-200 { animation-delay: 0.2s; }
.delay-400 { animation-delay: 0.4s; }
.delay-600 { animation-delay: 0.6s; }
.delay-800 { animation-delay: 0.8s; }
.delay-1000 { animation-delay: 1s; } /* 1 segundo */
.delay-1200 { animation-delay: 1.2s; }

/*
  Importante: Para que las animaciones de fade-in funcionen correctamente
  y no haya un "parpadeo" inicial, los elementos a los que apliques estas
  clases deberían tener una opacidad inicial de 0 si la animación no
  se aplica inmediatamente (por ejemplo, si usas JavaScript para añadir la clase).
  Sin embargo, con 'animation-fill-mode: forwards;', la opacidad final (1)
  se mantiene, y como las clases 'animate-fade-in-*' se aplican directamente
  en el JSX, Tailwind/CSS debería manejar bien el estado inicial y final.
  Añadir esto es una buena práctica de todas formas para asegurar que los
  elementos empiecen ocultos antes de que la animación con delay comience.
*/
[class*="animate-fade-in"] {
  opacity: 0; /* Asegura que comiencen invisibles */
}